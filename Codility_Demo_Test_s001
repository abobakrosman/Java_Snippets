// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        quickSort(A, 0,A.length-1);
        int start =-1;
        a:for(int j=0;j<A.length;j++){
            start++;
        if(A[j]>0)
        break;
    }
        
        if(A[start]!=1)
        return 1;
        
        int search =2;
     
        for(int i=start+1;i<A.length;i++)
        {
            if(A[i]!=A[i-1] &&   A[i]!=search)
            return search;
            
            if( A[i]==search)
            search++;
        
        }
        
        return ((A[A.length-1])>0) ? A[A.length-1]+1 :  1;
    }
        int binarySearch(int arr[], int l, int r, int x) 
    { 
        if (r >= l) { 
            int mid = l + (r - l) / 2; 
  
            // If the element is present at the 
            // middle itself 
            if (arr[mid] == x) 
                return 1; 
  
            // If element is smaller than mid, then 
            // it can only be present in left subarray 
            if (arr[mid] > x) 
                return binarySearch(arr, l, mid - 1, x); 
  
            // Else the element can only be present 
            // in right subarray 
            return binarySearch(arr, mid + 1, r, x); 
        } 
  
        // We reach here when element is not present 
        // in array 
        return -1; 
    } 

public  void quickSort(int[] arr, int start, int end){

	        int partition = partition(arr, start, end);

	        if(partition-1>start) {
	            quickSort(arr, start, partition - 1);
	        }
	        if(partition+1<end) {
	            quickSort(arr, partition + 1, end);
	        }
	    }

	    public  int partition(int[] arr, int start, int end){
	        int pivot = arr[end];

	        for(int i=start; i<end; i++){
	            if(arr[i]<pivot){
	                int temp= arr[start];
	                arr[start]=arr[i];
	                arr[i]=temp;
	                start++;
	            }
	        }

	        int temp = arr[start];
	        arr[start] = pivot;
	        arr[end] = temp;

	        return start;
    }
 

}
